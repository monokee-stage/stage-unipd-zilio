    //---------------------------------------------------------------------------

    JSONObject obj = new JSONObject(json);
    JSONObject process = obj.getJSONObject("definitions").getJSONObject("process");

    BpmnModel modelTest = new BpmnModel();

    if (!process.equals(null)) {
      //set process attributes
      Process processTest = new Process();
      modelTest.addProcess(processTest);
      processTest.setId(process.getString("id"));
      processTest.setName(process.getString("name"));
      processTest.isExecutable();
      if(obj.getJSONObject("definitions").has("targetNamespace"))
        modelTest.setTargetNamespace(obj.getJSONObject("definitions").getString("targetNamespace"));
      else
        modelTest.setTargetNamespace("modelTest");

      //set startEvent attributes
      StartEvent startEvent = new StartEvent();
      startEvent.setId(process.getJSONObject("startEvent").getString("id"));
      if(process.getJSONObject("startEvent").has("name"))
        startEvent.setName(process.getJSONObject("startEvent").getString("name"));
      if(process.getJSONObject("startEvent").has("flowable:formFieldValidation"))
        startEvent.setValidateFormFields(process.getJSONObject("startEvent").get("flowable:formFieldValidation").toString());
      processTest.addFlowElement(startEvent);

      //set userTask attributes
      if(process.has("userTask")) {
        if (process.get("userTask").getClass().toString().equals("class org.json.JSONArray")) {
          for (int j = 0; j < process.getJSONArray("userTask").length(); j++) {
            UserTask userTask = new UserTask();
            //Activity activity = new UserTask();
            //activity.setValues(userTask);
            userTask.setId(process.getJSONArray("userTask").getJSONObject(j).getString("id"));
            userTask.setName(process.getJSONArray("userTask").getJSONObject(j).getString("name"));
            //userTask.setAssignee("davide");
            if (process.getJSONArray("userTask").getJSONObject(j).has("flowable:formFieldValidation"))
              userTask.setValidateFormFields(process.getJSONArray("userTask").getJSONObject(j).get("flowable:formFieldValidation").toString());
            processTest.addFlowElement(userTask);
          }
        } else {
          UserTask userTask = new UserTask();
          userTask.setId(process.getJSONObject("userTask").getString("id"));
          userTask.setName(process.getJSONObject("userTask").getString("name"));
          if (process.getJSONObject("userTask").has("flowable:formFieldValidation"))
            userTask.setValidateFormFields(process.getJSONObject("userTask").get("flowable:formFieldValidation").toString());
          processTest.addFlowElement(userTask);
          //System.out.println(process.getJSONObject("serviceTask").getJSONObject("extensionElements").getJSONArray("flowable:field").toString().equals("class org.json.JSONArray"));
        }
      }

      //set serviceTask attributes
      if(process.has("serviceTask")) {
        if (process.get("serviceTask").getClass().toString().equals("class org.json.JSONArray")) {
          for (int j = 0; j < process.getJSONArray("serviceTask").length(); j++) {
            ServiceTask serviceTask = new ServiceTask();
            //Activity activity = new UserTask();
            //activity.setValues(userTask);
            serviceTask.setId(process.getJSONArray("serviceTask").getJSONObject(j).getString("id"));
            serviceTask.setName(process.getJSONArray("serviceTask").getJSONObject(j).getString("name"));
            if(process.getJSONArray("serviceTask").getJSONObject(j).has("flowable:class"))
              serviceTask.setOperationRef(process.getJSONArray("serviceTask").getJSONObject(j).get("flowable:class").toString());
            //userTask.setAssignee("davide")
            if (process.getJSONArray("serviceTask").getJSONObject(j).has("flowable:type"))
              serviceTask.setType(process.getJSONArray("serviceTask").getJSONObject(j).get("flowable:type").toString());

            if (process.getJSONArray("serviceTask").getJSONObject(j).has("extensionElements")) {
              List<FieldExtension> fieldExtension = new ArrayList<>();
              JSONArray flowableField = process.getJSONArray("serviceTask").getJSONObject(j).getJSONObject("extensionElements").getJSONArray("flowable:field");
              for (int i = 0; i < flowableField.length(); i++) {
                FieldExtension f = new FieldExtension();
                f.setFieldName(flowableField.getJSONObject(i).getString("name"));
                f.setStringValue(flowableField.getJSONObject(i).getString("flowable:string"));
                //f.setExpression(process.getJSONObject("serviceTask").getJSONObject("extensionElements").getJSONArray("flowable:field").getJSONObject("flowable:string").get(i).toString());
                System.out.println(f.getFieldName() + " " + f.getStringValue());
                fieldExtension.add(f);
              }
              serviceTask.setFieldExtensions(fieldExtension);
            }
            processTest.addFlowElement(serviceTask);
          }
        } else {
          ServiceTask serviceTask = new ServiceTask();
          serviceTask.setId(process.getJSONObject("serviceTask").getString("id"));
          serviceTask.setName(process.getJSONObject("serviceTask").getString("name"));
          if (process.getJSONObject("serviceTask").has("flowable:class"))
            serviceTask.setOperationRef(process.getJSONObject("serviceTask").get("flowable:class").toString());
          if (process.getJSONObject("serviceTask").has("flowable:type")) {
            serviceTask.setType(process.getJSONObject("serviceTask").get("flowable:type").toString());
            /*if(process.getJSONObject("serviceTask").get("flowable:type").toString() == "http") {
              HttpServiceTask httpServiceTask = new HttpServiceTask();
              httpServiceTask.setHttpRequestHandler();
              httpServiceTask.setHttpResponseHandler();
            }
          }
          if (process.getJSONObject("serviceTask").has("extensionElements")) {
            List<FieldExtension> fieldExtension = new ArrayList<>();
            for (int i = 0; i < process.getJSONObject("serviceTask").getJSONObject("extensionElements").getJSONArray("flowable:field").length(); i++) {
              JSONArray flowableField = process.getJSONObject("serviceTask").getJSONObject("extensionElements").getJSONArray("flowable:field");
              FieldExtension f = new FieldExtension();
              f.setFieldName(flowableField.getJSONObject(i).getString("name"));
              f.setStringValue(flowableField.getJSONObject(i).getString("flowable:string"));
              //f.setExpression(process.getJSONObject("serviceTask").getJSONObject("extensionElements").getJSONArray("flowable:field").getJSONObject("flowable:string").get(i).toString());
              System.out.println(f.getFieldName() + " " + f.getStringValue());
              fieldExtension.add(f);
            }
            serviceTask.setFieldExtensions(fieldExtension);
          }
          //serviceTask.setExtensionElements();
          processTest.addFlowElement(serviceTask);
        }
      }

      if(process.has("exclusiveGateway")) {
        if (process.get("exclusiveGateway").getClass().toString().equals("class org.json.JSONArray")) {
          for (int j = 0; j < process.getJSONArray("exclusiveGateway").length(); j++) {
            ExclusiveGateway exclusiveGateway = new ExclusiveGateway();
            exclusiveGateway.setId(process.getJSONArray("exclusiveGateway").getJSONObject(j).getString("id"));
            processTest.addFlowElement(exclusiveGateway);
          }
        } else {
          ExclusiveGateway exclusiveGateway = new ExclusiveGateway();
          exclusiveGateway.setId(process.getJSONObject("exclusiveGateway").getString("id"));
          processTest.addFlowElement(exclusiveGateway);
        }
      }

      for (int j = 0; j < process.getJSONArray("sequenceFlow").length(); j++) {
        SequenceFlow sequenceFlow = new SequenceFlow();
        if(process.getJSONArray("sequenceFlow").getJSONObject(j).has("id"))
          sequenceFlow.setId(process.getJSONArray("sequenceFlow").getJSONObject(j).getString("id"));
        else
          sequenceFlow.setId("flow"+j);
        if(process.getJSONArray("sequenceFlow").getJSONObject(j).has("name"))
          sequenceFlow.setName(process.getJSONArray("sequenceFlow").getJSONObject(j).getString("name"));
        sequenceFlow.setSourceRef(process.getJSONArray("sequenceFlow").getJSONObject(j).getString("sourceRef"));
        sequenceFlow.setTargetRef(process.getJSONArray("sequenceFlow").getJSONObject(j).getString("targetRef"));
        //sequenceFlow.setSourceFlowElement(sequenceFlow.getSourceFlowElement());
        processTest.addFlowElement(sequenceFlow);
      }

      if(process.get("endEvent").getClass().toString().equals("class org.json.JSONArray")) {
        for (int j = 0; j < process.getJSONArray("endEvent").length(); j++) {
          EndEvent endEvent = new EndEvent();
          endEvent.setId(process.getJSONArray("endEvent").getJSONObject(j).getString("id"));
          if (process.getJSONArray("endEvent").getJSONObject(j).has("name"))
            endEvent.setName(process.getJSONArray("endEvent").getJSONObject(j).getString("name"));
          processTest.addFlowElement(endEvent);
        }
      }else{
          EndEvent endEvent = new EndEvent();
          endEvent.setId(process.getJSONObject("endEvent").getString("id"));
          if (process.getJSONObject("endEvent").has("name"))
            endEvent.setName(process.getJSONObject("endEvent").getString("name"));
          processTest.addFlowElement(endEvent);
      }

      processTest = modelTest.getMainProcess();

      //--------------------------------------------------------------------------

      XMLInputFactory xif = XMLInputFactory.newInstance();
      InputStreamReader in = new InputStreamReader(new ByteArrayInputStream(flowWithoutConditionNoDefaultFlow.getBytes()),
          StandardCharsets.UTF_8);
      XMLStreamReader xtr = null;
      try {
        xtr = xif.createXMLStreamReader(in);
      } catch (XMLStreamException e) {
        e.printStackTrace();
      }
    */


            /* PER VISUALIZZARE BENE
            Iterator itr2 = endEvent.iterator();
            Iterator<Map.Entry> itr1 = null;
            while (itr2.hasNext())
            {
                itr1 = ((Map) itr2.next()).entrySet().iterator();
                while (itr1.hasNext()) {
                    Map.Entry pair = itr1.next();
                    //System.out.println(pair.getKey() + " : " + pair.getValue());
                }
            }*/